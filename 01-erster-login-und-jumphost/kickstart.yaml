heat_template_version: 2016-10-14
#
# You can deploy this template using one of the following commands:
#
# SSH public Key file uploaded to Dashboard (Horizon) - RSA only
# 'openstack stack create -t kickstart.yaml --parameter key_name=<publicKeyName> <stackName>'
#
# or you can just paste it into the web-ui under "orchestration" >> "launch stack"
#
# after successful stack creation you can login with
# ssh -l syseleven <floatingIP> -A -i ~/.ssh/<private-key>
#

description: Simple template to deploy a single compute instance with a user named syseleven including the openstack-CLI-tools.
  This template is prepared to be used with https://dashboard.cloud.syseleven.net.

parameters:
  key_name:
    type: string
    constraints:
      - custom_constraint: nova.keypair

  image:
    type: string
    default: Focal 20.04 (2022-11-25)
    constraints:
      - custom_constraint: glance.image
  flavor:
    type: string
    default: m1.tiny
    constraints:
      - custom_constraint: nova.flavor
  public_network:
    type: string
    default: ext-net

resources:

  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming SSH and ICMP traffic from anywhere.
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'kickstart', 'allow incoming traffic, tcp port 22 and icmp']]
      rules:
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp }

  host:
    type: OS::Nova::Server
    properties:
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'kickstart']]
      user_data_format: RAW
      user_data: { get_resource: cloud-init-config }
      image: { get_param: image }
      key_name: { get_param: key_name }
      flavor: { get_param: flavor }
      networks:
        - port: { get_resource: port }

  cloud-init-config:
   # cloud init resource
   type: OS::Heat::CloudConfig
   properties:
     cloud_config:
       manage_etc_hosts: true
       package_upgrade: true
       users:
           - name: syseleven
             gecos: Syseleven Stack user
             sudo: ALL=(ALL) NOPASSWD:ALL
             shell: /bin/bash
             lock-passwd: false
       write_files:
         -  content: |
              #!/usr/bin/env bash
              echo "# Started SSH key injection and motd setup"
              # wait for valid network
              echo "# Waiting for valid network"
              until ping -c 1 syseleven.de > /dev/null; do sleep 2; done
              echo "# Found valid network"
              # wait for a valid user
              echo "# Waiting for a valid user"
              until id syseleven > /dev/null; do sleep 2; done
              echo "# Found id: syseleven"
              # create ssh folder
              if [ ! -d "/home/syseleven/.ssh/" ]; then
              mkdir /home/syseleven/.ssh
              fi           
              # create empty file for next command not to run into an error
              if [ ! -f "/home/syseleven/.ssh/authorized_keys" ]; then
              touch /home/syseleven/.ssh/authorized_keys
              fi
              # pull openssh key if exists
              if [ $(curl -sL -w "%{http_code}" "http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key" -o /dev/null) -eq 200 ]; then
              curl -s "http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key" >> /home/syseleven/.ssh/authorized_keys
              echo "# Open SSH key file provided via OpenStack API, injecting"
              else
              echo "# Open SSH key file not provided via OpenStack API, skipping injection"
              fi
              # correct permissions   
              chown -R syseleven: /home/syseleven
              # disable ubuntu landscape scripts
              if [ $(curl -sL -w "%{http_code}" "https://raw.githubusercontent.com/syseleven/heat-examples/master/kickstart/motd.txt" -o /dev/null) -eq 200 ]; then
              echo "# S11 motd content found, writing"
              curl -s "https://raw.githubusercontent.com/syseleven/heat-examples/master/kickstart/motd.txt" > /etc/motd
              chmod 400 /etc/update-motd.d/*
              else
              echo "# Could not download S11 motd content, writing generic motd"
              echo "Syseleven Kickstart instance" > /etc/motd
              fi
              echo "# Finished SSH key injection and motd setup"
            path: /root/inject_userkey
            permissions: 0700
         # don't replace content in this hot template, only write your credentials inside the newly generated vm!
         -  content: | 
              # replace "demo_user", "demo_project_id" and "demo_password" by your corresponding credentials

              export OS_USERNAME="demo_user"
              export OS_PROJECT_ID="demo_project_id"
              export OS_PASSWORD="demo_password"

              # set default region in NAME and URL if required
              # available regions: cbk, dbl
              export OS_REGION_NAME="dbl"
              export OS_AUTH_URL=https://keystone.cloud.syseleven.net:5000/v3

              # the following lines don't need to be changed
              export OS_IDENTITY_API_VERSION=3
              export OS_USER_DOMAIN_NAME="Default"
              export OS_INTERFACE=public
              export OS_ENDPOINT_TYPE=public

              # Don't leave a blank variable, unset it if it was empty
              if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
              if [ -z "$OS_USER_DOMAIN_NAME" ]; then unset OS_USER_DOMAIN_NAME; fi
              unset OS_TENANT_ID
              unset OS_TENANT_NAME
            path: /etc/skel/openrc
            owner: root
            permissions: 0600
         - content: |
              #!/usr/bin/env bash
              echo "# Started terraform setup"
              terraformversion=1.0.3
              until id syseleven > /dev/null; do sleep 2; done
              url="https://releases.hashicorp.com/terraform/${terraformversion}/terraform_${terraformversion}_linux_amd64.zip"
              bin="/home/syseleven/bin"
              tmp="/tmp/terraform.zip"
              /bin/mkdir -p $bin
              /usr/bin/curl -s -o $tmp $url
              /usr/bin/unzip -q $tmp -d $bin
              /bin/chown syseleven:syseleven $bin/terraform
              /bin/chown -R syseleven:syseleven $bin/
              if [ -f $tmp ]; then rm $tmp; fi
              if [ -x $bin/terraform ]; then (echo "# Finished terraform setup"; exit 0) else (echo "# Error while installing terraform"; exit 99); fi
           path: /root/terra-install.sh
           owner: root
           permissions: 0700
         - content: |
              #!/usr/bin/env bash
              echo "# Started openstack client setup"
              export DEBIAN_FRONTEND=noninteractive
              echo "## Upgrading system"
              apt update
              apt upgrade -q -y
              echo "## Installing openstack client and plugins"
              apt install -q -y python3-minimal python3-pip
              pip3 install -U pip setuptools
              pip3 install python-openstackclient python-heatclient python-designateclient python-barbicanclient python-glanceclient python-neutronclient python-octaviaclient --ignore-installed PyYAML
              pip3 install cryptography==3.3.2 
              if which openstack >/dev/null; then (echo "# Finished openstack client setup"; exit 0) else (echo "# Error while installing openstack client"; exit 99); fi
           path: /root/openstackclient-install.sh
           owner: root
           permissions: 0700
         - content: |
              #!/usr/bin/env bash
              cd /tmp
              echo "# Downloading kubectl client"
              curl -LO https://dl.k8s.io/release/v1.23.10/bin/linux/amd64/kubectl
              echo "# Installing kubectl client"
              sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              if which kubectl >/dev/null; then (echo "# Finished kubectl client setup"; exit 0) else (echo "# Error while installing kubectl client"; exit 99); fi
              echo "# Configuring kubectl and installing plugins"
              mkdir /home/syseleven/.kube
              chown syseleven:syseleven /home/syseleven/.kube
              chmod 700 /home/syseleven/.kube
              echo "# adding kubectl alias and autocompletion"
              echo "source <(kubectl completion bash)" >> /home/syseleven/.bashrc
              echo "alias k=kubectl" >>  /home/syseleven/.bashrc
              echo "complete -o default -F __start_kubectl k" >> /home/syseleven/.bashrc
              echo "# Downloading and installing kubectx and kubens"
              curl -LO https://github.com/ahmetb/kubectx/releases/download/v0.9.4/kubectx_v0.9.4_linux_x86_64.tar.gz
              tar -zxvf kubectx_v0.9.4_linux_x86_64.tar.gz 
              mv kubectx /usr/local/bin/kubectx
              curl -LO https://github.com/ahmetb/kubectx/releases/download/v0.9.4/kubens_v0.9.4_linux_x86_64.tar.gz
              tar -zxvf kubens_v0.9.4_linux_x86_64.tar.gz
              mv kubens /usr/local/bin/kubens
           path: /root/kubectlclient-install.sh
           owner: root
           permissions: 0700
         - content: |
              #!/usr/bin/env bash
              cd /tmp
              echo "# Downloading helm client"
              curl -LO https://get.helm.sh/helm-v3.10.2-linux-amd64.tar.gz
              echo "# Installing helm client"
              tar -zxvf helm-v3.10.2-linux-amd64.tar.gz
              mv linux-amd64/helm /usr/local/bin/helm
              if which helm >/dev/null; then (echo "# Finished helm client setup"; exit 0) else (echo "# Error while installing helm client"; exit 99); fi
           path: /root/helmclient-install.sh
           owner: root
           permissions: 0700
       runcmd:
         - /root/inject_userkey
         - /root/terra-install.sh
         - /root/openstackclient-install.sh
         - /root/kubectlclient-install.sh
         - /root/helmclient-install.sh
       packages:
         - git
         - wget
         - curl
         - unzip
         - screen

  port:
    type: OS::Neutron::Port
    depends_on: [ net ]
    properties:
      network: { get_resource: net}
      security_groups: [ get_resource: allow_ssh ]

  net:
    type: OS::Neutron::Net
    properties:
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'kickstart', 'net']]

  subnet:
    type: OS::Neutron::Subnet
    depends_on: [ net ]
    properties:
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'kickstart', 'subnet']]
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      network: { get_resource: net }
      ip_version: 4
      cidr: 10.0.0.0/24
      allocation_pools:
      - {start: 10.0.0.10, end: 10.0.0.250}

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": { get_param: public_network }}
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'kickstart', 'router']]

  router_subnet_bridge:
    type: OS::Neutron::RouterInterface
    depends_on: [ subnet, router ]
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet }

  floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ port, router_subnet_bridge ]
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: port }
